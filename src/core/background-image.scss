///@author Kobina Koomson G.

//region background repeat

///
$bg-and-mask : (
    "bg-" : "background",
    "mask-" : "mask");

///

$repeat-mods : (
    r : repeat,
    ry : repeat-y,
    rx : repeat-x,
    nr : no-repeat
);

///This function creates classes and accompanying rules that are applicable to
/// the background-image and and mask properties
///@param rule-c {String} the string to attach to the background or mask prefix e.g '-repeat' [generated-key]
///@param mods {Dictionary<String>} the variations of the value that the generated key accepts
@mixin makeBgAndMaskRules($rule-c, $mods)
{
  @each $class, $rule-key in $bg-and-mask
  {
    @each $mod-key, $mod-value in $mods
    {
      #{"."}#{$class}#{$mod-key}
      {
        #{$rule-key}#{$rule-c}: #{$mod-value};
        -webkit-#{$rule-key}#{$rule-c}: #{$mod-value};
      }
    }
  }
}

/// make background and make repetition classes amd rule sets
@include makeBgAndMaskRules("-repeat", $repeat-mods);

//endregion

//region background size

$nums : 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100;

///Method for creates background and mask size classes and rules
///@param {list<number>} list The list of numbers for which classes and rules shd be generated
///@param {String} unit The unit of measurement e.g "px"
///@param {String} rule-c The rule class [the key prefix in this case, NOT vendor prefix]
@mixin create-rules($list, $unit, $rule-c)
{
  @if ($unit == "%")
  {
    @each $num in $list
    {
      &#{"-"}#{$num}p
      {
        -webkit-#{$rule-c}-size : #{$num}#{$unit};
        #{$rule-c}-size         : #{$num}#{$unit};
      }
    }
  } @else
  {
    @each $num in $list
    {
      &#{"-"}#{$num}
      {
        -webkit-#{$rule-c}-size : #{$num}#{$unit};
        #{$rule-c}-size         : #{$num}#{$unit};
      }
    }
  }
}

.bgs
{
  @include create-rules($nums, "%", "background");
  @include create-rules($nums, "px", "background");

  &-cov
  {
    -webkit-background-size : cover; background-size : cover;
  }
  &-con
  {
    -webkit-background-size : contain; background-size : contain;
  }
}

.mask-s
{
  @include create-rules($nums, "%", "mask");
  @include create-rules($nums, "px", "mask");
}

//endregion

//region background attachment
///create background attachment rules
.bga
{
  &-f
  {
    -webkit-background-attachment : fixed;
    background-attachment : fixed;
  }
  &-s
  {
    -webkit-background-attachment : scroll;
    background-attachment : scroll;
  }
  &-l
  {
    -webkit-background-attachment : local;
    background-attachment : local;
  }
}

//endregion

//region background position
///This method generates class names and rules for background position
///Append a 'p' to the class name if the unit is '%'
///@param {list<number>} list  the list of numbers for which classes should be generated
///@param {String} rule-key The css rule key to be used in rule generation
///@param {String} unit The unit of measurement
@mixin create-rules($list, $rule-key, $unit, $rule-c)
{
  @if ($unit == "%")
  {
    @each $num in $list
    {
      &#{$num}p //
      {
        $value : if($rule-c == "", #{$num}#{$unit}, "");
        #{$rule-key}-position#{$rule-c} : #{$num}#{$unit} #{$value};
        -webkit-#{$rule-key}-position#{$rule-c} : #{$num}#{$unit} #{$value};

        @if ($rule-c != "")
        {
          -ms-#{$rule-key}-position#{$rule-c} : #{$num}#{$unit} #{$value};
        }
      }
    }
  } @else
  {
    @each $num in $list
    {
      &#{$num}
      {
        $value : if($rule-c == "", #{$num}#{$unit}, "");
        #{$rule-key}-position#{$rule-c} : #{$num}#{$unit} #{$value};
        -webkit-#{$rule-key}-position#{$rule-c} : #{$num}#{$unit} #{$value};

        @if ($rule-c != "")
        {
          -ms-#{$rule-key}-position#{$rule-c} : #{$num}#{$unit} #{$value};
        }
      }
    }
  }
}

$rule-keys : "background-position",
"background-position-x",
"background-position-y";

$bg-and-mask : (
    "bg" : "background",
    "mask-" : "mask");

///.bg
///{
@each $class, $rule-key in $bg-and-mask
{
  #{"."}#{$class}p
  {
    &-ctr
    {
      #{$rule-key}-position : center center;
      -webkit-#{$rule-key}-position : center center;
    }
    @include create-rules($nums, #{$rule-key}, "px", "");
    @include create-rules($nums, #{$rule-key}, "%", "");

    &-x-
    {
      &-ctr
      {
        #{$rule-key}-position-x : center;
        -webkit-#{$rule-key}-position-x : center;
      }
      @include create-rules($nums, #{$rule-key}, "px", "-x");
      @include create-rules($nums, #{$rule-key}, "%", "-x");
    }

    &-y-
    {
      &-ctr
      {
        #{$rule-key}-position-y : center;
        -webkit-#{$rule-key}-position-y : center;
      }
      @include create-rules($nums, #{$rule-key}, "px", "-y");
      @include create-rules($nums, #{$rule-key}, "%", "-y");
    }
  }
}

//endregion